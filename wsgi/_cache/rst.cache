(dp1
S''
V<div class="document">\u000a</div>\u000a
p2
sS'Returns balance of the given *trader*'
p3
V<div class="document">\u000a<p>Returns balance of the given <em>trader</em></p>\u000a</div>\u000a
p4
sS'Function returning division of the operands'
p5
V<div class="document">\u000a<p>Function returning division of the operands</p>\u000a</div>\u000a
p6
sS'This a combination of a limit order and a cancel order sent immediately\nIt works as a market order in sense that it is not put into the order queue\nbut can be matched (as a limit order)\nonly if there are orders with suitable price in the queue'
p7
V<div class="document">\u000a<p>This a combination of a limit order and a cancel order sent immediately\u000aIt works as a market order in sense that it is not put into the order queue\u000abut can be matched (as a limit order)\u000aonly if there are orders with suitable price in the queue</p>\u000a</div>\u000a
p8
sS'Tag class representing the sell side'
p9
V<div class="document">\u000a<p>Tag class representing the sell side</p>\u000a</div>\u000a
p10
sS'Limit-like order which is cancelled after given *delay*'
p11
V<div class="document">\u000a<p>Limit-like order which is cancelled after given <em>delay</em></p>\u000a</div>\u000a
p12
sS'Represent an *orderbook* from point of view of a remote trader connected\nto the market by means of a *link* that introduces some latency in information propagation'
p13
V<div class="document">\u000a<p>Represent an <em>orderbook</em> from point of view of a remote trader connected\u000ato the market by means of a <em>link</em> that introduces some latency in information propagation</p>\u000a</div>\u000a
p14
sS'Returns derivative of a *trader*\'s "cleared" balance'
p15
V<div class="document">\u000a<p>Returns derivative of a <em>trader</em>'s &quot;cleared&quot; balance</p>\u000a</div>\u000a
p16
sS'Creates for a *strategy* a clone with same parameters but sending virtual market orders of unit volume'
p17
V<div class="document">\u000a<p>Creates for a <em>strategy</em> a clone with same parameters but sending virtual market orders of unit volume</p>\u000a</div>\u000a
p18
sS'Represents latency in information propagation between two agents\n(normally between a trader and a market).\nEnsures that sending packets via links preserves their order.\nHolds two one-way links in opposite directions.\n\nParameters:\n\n**up**\n    Forward link (normally from a trader to a market)\n\n**down**\n    Backward link (normally from a market to a trader)'
p19
V<div class="document">\u000a<p>Represents latency in information propagation between two agents\u000a(normally between a trader and a market).\u000aEnsures that sending packets via links preserves their order.\u000aHolds two one-way links in opposite directions.</p>\u000a<p>Parameters:</p>\u000a<dl class="docutils">\u000a<dt><strong>up</strong></dt>\u000a<dd>Forward link (normally from a trader to a market)</dd>\u000a<dt><strong>down</strong></dt>\u000a<dd>Backward link (normally from a market to a trader)</dd>\u000a</dl>\u000a</div>\u000a
p20
sS'A discrete signal with user-defined increments.\n\nParameters:\n\n**initialValue**\n    initial value of the signal (default: 0)\n\n**deltaDistr**\n    increment function (default: normal distribution with |mu| = 0, |sigma| = 1)\n\n**intervalDistr**\n    defines intervals between signal updates\n    (default: exponential distribution with |lambda| = 1)'
p21
V<div class="document">\u000a<p>A discrete signal with user-defined increments.</p>\u000a<p>Parameters:</p>\u000a<dl class="docutils">\u000a<dt><strong>initialValue</strong></dt>\u000a<dd>initial value of the signal (default: 0)</dd>\u000a<dt><strong>deltaDistr</strong></dt>\u000a<dd>increment function (default: normal distribution with \u03bc = 0, \u03c3 = 1)</dd>\u000a<dt><strong>intervalDistr</strong></dt>\u000a<dd>defines intervals between signal updates\u000a(default: exponential distribution with \u03bb = 1)</dd>\u000a</dl>\u000a</div>\u000a
p22
sS'Represents latency in information propagation from one agent to another one\n(normally between a trader and a market).\nEnsures that sending packets via a link preserves their order.\n\nParameters:\n\n**latency**\n    function called for each packet in order to determine\n    when it will appear at the destination point'
p23
V<div class="document">\u000a<p>Represents latency in information propagation from one agent to another one\u000a(normally between a trader and a market).\u000aEnsures that sending packets via a link preserves their order.</p>\u000a<p>Parameters:</p>\u000a<dl class="docutils">\u000a<dt><strong>latency</strong></dt>\u000a<dd>function called for each packet in order to determine\u000awhen it will appear at the destination point</dd>\u000a</dl>\u000a</div>\u000a
p24
sS'Exponential distribution. |lambda| is 1.0 divided by the desired mean. It should be greater zero. Returned values range from 0 to positive infinity'
p25
V<div class="document">\u000a<p>Exponential distribution. \u03bb is 1.0 divided by the desired mean. It should be greater zero. Returned values range from 0 to positive infinity</p>\u000a</div>\u000a
p26
sS"Returns trader's position (i.e. number of assets traded)"
p27
V<div class="document">\u000a<p>Returns trader's position (i.e. number of assets traded)</p>\u000a</div>\u000a
p28
sS'Function returning Sum of the operands'
p29
V<div class="document">\u000a<p>Function returning Sum of the operands</p>\u000a</div>\u000a
p30
sS'Exponentially weighted moving average'
p31
V<div class="document">\u000a<p>Exponentially weighted moving average</p>\u000a</div>\u000a
p32
sS'Gamma distribution. Conditions on the parameters are |alpha| > 0 and |beta| > 0.\n\nThe probability distribution function is: ::\n\n            x ** (alpha - 1) * math.exp(-x / beta)\n  pdf(x) =  --------------------------------------\n               math.gamma(alpha) * beta ** alpha'
p33
V<div class="document">\u000a<p>Gamma distribution. Conditions on the parameters are \u03b1 &gt; 0 and \u03b2 &gt; 0.</p>\u000a<p>The probability distribution function is:</p>\u000a<pre class="literal-block">\u000a          x ** (alpha - 1) * math.exp(-x / beta)\u000apdf(x) =  --------------------------------------\u000a             math.gamma(alpha) * beta ** alpha\u000a</pre>\u000a</div>\u000a
p34
sS'Constant function returning **value**.'
p35
V<div class="document">\u000a<p>Constant function returning <strong>value</strong>.</p>\u000a</div>\u000a
p36
sS'Keeps a set of events to be launched in the future'
p37
V<div class="document">\u000a<p>Keeps a set of events to be launched in the future</p>\u000a</div>\u000a
p38
sS'Beta distribution. Conditions on the parameters are |alpha| > 0 and |beta| > 0. Returned values range between 0 and 1.'
p39
V<div class="document">\u000a<p>Beta distribution. Conditions on the parameters are \u03b1 &gt; 0 and \u03b2 &gt; 0. Returned values range between 0 and 1.</p>\u000a</div>\u000a
p40
sS"Two averages strategy compares two averages of price of the same asset but\nwith different parameters ('slow' and 'fast' averages) and when\nthe first is greater than the second one it buys,\nwhen the first is lower than the second one it sells\n\nIt has following parameters:\n\n|average1|\n     functional used to obtain the first average\n     (defaut: expenentially weighted moving average with |alpha| = 0.15)\n\n|ewma_alpha1|\n    parameter |alpha| for the first exponentially weighted moving average\n    (default: 0.15.)\n\n|ewma_alpha2|\n    parameter |alpha| for the second exponentially weighted moving average\n    (default: 0.015.)\n\n|threshold|\n    threshold when the trader starts to act (default: 0.)\n\n|volumeDistr|\n    defines volumes of orders to create\n    (default: exponential distribution with |lambda| = 1)\n\n|creationIntervalDistr|\n    defines intervals of time between order creation\n    (default: exponential distribution with |lambda| = 1)"
p41
V<div class="document">\u000a<p>Two averages strategy compares two averages of price of the same asset but\u000awith different parameters ('slow' and 'fast' averages) and when\u000athe first is greater than the second one it buys,\u000awhen the first is lower than the second one it sells</p>\u000a<p>It has following parameters:</p>\u000a<dl class="docutils">\u000a<dt><strong>Average 1</strong></dt>\u000a<dd>functional used to obtain the first average\u000a(defaut: expenentially weighted moving average with \u03b1 = 0.15)</dd>\u000a<dt><a href="#id1"><span class="problematic" id="id2">|ewma_alpha1|</span></a></dt>\u000a<dd>parameter \u03b1 for the first exponentially weighted moving average\u000a(default: 0.15.)</dd>\u000a<dt><a href="#id3"><span class="problematic" id="id4">|ewma_alpha2|</span></a></dt>\u000a<dd>parameter \u03b1 for the second exponentially weighted moving average\u000a(default: 0.015.)</dd>\u000a<dt><strong>Threshold</strong></dt>\u000a<dd>threshold when the trader starts to act (default: 0.)</dd>\u000a<dt><strong>Volume of orders to create</strong></dt>\u000a<dd>defines volumes of orders to create\u000a(default: exponential distribution with \u03bb = 1)</dd>\u000a<dt><strong>Time intervals between two order creations</strong></dt>\u000a<dd>defines intervals of time between order creation\u000a(default: exponential distribution with \u03bb = 1)</dd>\u000a</dl>\u000a<div class="system-messages section">\u000a<h1>Docutils System Messages</h1>\u000a<div class="system-message" id="id1">\u000a<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">&lt;string&gt;</tt>, line 119); <em><a href="#id2">backlink</a></em></p>\u000aUndefined substitution referenced: &quot;ewma_alpha1&quot;.</div>\u000a<div class="system-message" id="id3">\u000a<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">&lt;string&gt;</tt>, line 123); <em><a href="#id4">backlink</a></em></p>\u000aUndefined substitution referenced: &quot;ewma_alpha2&quot;.</div>\u000a</div>\u000a</div>\u000a
p42
sS'Market order of given *side* and *volume*'
p43
V<div class="document">\u000a<p>Market order of given <em>side</em> and <em>volume</em></p>\u000a</div>\u000a
p44
sS'Pareto distribution. |alpha| is the shape parameter.'
p45
V<div class="document">\u000a<p>Pareto distribution. \u03b1 is the shape parameter.</p>\u000a</div>\u000a
p46
sS'Virtual order that implements iceberg strategy:\nFirst it sends an order for a small potion of its volume to a book and\nonce it is filled resends a new order'
p47
V<div class="document">\u000a<p>Virtual order that implements iceberg strategy:\u000aFirst it sends an order for a small potion of its volume to a book and\u000aonce it is filled resends a new order</p>\u000a</div>\u000a
p48
sS'Mean reversion strategy believes that asset price should return to its average value.\nIt estimates this average using some functional and\nif the current asset price is lower than the average\nit buys the asset and if the price is higher it sells the asset.\n\nIt has following parameters:\n\n|orderFactory|\n    order factory function (default: order.Market.T)\n\n|creationIntervalDistr|\n    defines intervals of time between order creation\n    (default: exponential distribution with |lambda| = 1)\n\n|ewma_alpha|\n    |alpha| for exponentially weighted moving average\n    (default: 0.15)\n\n|volumeDistr|\n    defines volumes of orders to create\n    (default: exponential distribution with |lambda| = 1)'
p49
V<div class="document">\u000a<p>Mean reversion strategy believes that asset price should return to its average value.\u000aIt estimates this average using some functional and\u000aif the current asset price is lower than the average\u000ait buys the asset and if the price is higher it sells the asset.</p>\u000a<p>It has following parameters:</p>\u000a<dl class="docutils">\u000a<dt><strong>Order factory</strong></dt>\u000a<dd>order factory function (default: order.Market.T)</dd>\u000a<dt><strong>Time intervals between two order creations</strong></dt>\u000a<dd>defines intervals of time between order creation\u000a(default: exponential distribution with \u03bb = 1)</dd>\u000a<dt><a href="#id1"><span class="problematic" id="id2">|ewma_alpha|</span></a></dt>\u000a<dd>\u03b1 for exponentially weighted moving average\u000a(default: 0.15)</dd>\u000a<dt><strong>Volume of orders to create</strong></dt>\u000a<dd>defines volumes of orders to create\u000a(default: exponential distribution with \u03bb = 1)</dd>\u000a</dl>\u000a<div class="system-messages section">\u000a<h1>Docutils System Messages</h1>\u000a<div class="system-message" id="id1">\u000a<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">&lt;string&gt;</tt>, line 122); <em><a href="#id2">backlink</a></em></p>\u000aUndefined substitution referenced: &quot;ewma_alpha&quot;.</div>\u000a</div>\u000a</div>\u000a
p50
sS'Signal strategy listens to some discrete signal\nand when the signal becomes more than some threshold the strategy starts to buy.\nWhen the signal gets lower than -threshold the strategy starts to sell.\n\nIt has following parameters:\n\n|signal|\n     signal to be listened to (default: RandomWalk)\n\n|orderFactory|\n    order factory function (default: order.Market.T)\n\n|threshold|\n    threshold when the trader starts to act (default: 0.7)\n\n|volumeDistr|\n    defines volumes of orders to create\n    (default: exponential distribution with |lambda| = 1)'
p51
V<div class="document">\u000a<p>Signal strategy listens to some discrete signal\u000aand when the signal becomes more than some threshold the strategy starts to buy.\u000aWhen the signal gets lower than -threshold the strategy starts to sell.</p>\u000a<p>It has following parameters:</p>\u000a<dl class="docutils">\u000a<dt><strong>Signal</strong></dt>\u000a<dd>signal to be listened to (default: RandomWalk)</dd>\u000a<dt><strong>Order factory</strong></dt>\u000a<dd>order factory function (default: order.Market.T)</dd>\u000a<dt><strong>Threshold</strong></dt>\u000a<dd>threshold when the trader starts to act (default: 0.7)</dd>\u000a<dt><strong>Volume of orders to create</strong></dt>\u000a<dd>defines volumes of orders to create\u000a(default: exponential distribution with \u03bb = 1)</dd>\u000a</dl>\u000a</div>\u000a
p52
sS'Return a random integer *N* such that *a* <= *N* <= *b*.'
p53
V<div class="document">\u000a<p>Return a random integer <em>N</em> such that <em>a</em> &lt;= <em>N</em> &lt;= <em>b</em>.</p>\u000a</div>\u000a
p54
sS'Generic periodic strategy that wakes up on events given by *eventGen*,\nchooses side of order to create using *sideFunc* and its volume by *volumeFunc*,\ncreates an order via *orderFactory* and sends the order to the market using its trader\n\nParameters:\n\n    |orderFactory|\n        order factory function (default: order.Limit.T)\n\n    |eventGen|\n        Event source making the strategy to wake up\n\n    |volumeFunc|\n        defines volumes of orders to create\n        (default: exponential distribution with |lambda| = 1)\n\n    |sideFunc|\n        function choosing side of order to create (default: randomSide)'
p55
V<div class="document">\u000a<p>Generic periodic strategy that wakes up on events given by <em>eventGen</em>,\u000achooses side of order to create using <em>sideFunc</em> and its volume by <em>volumeFunc</em>,\u000acreates an order via <em>orderFactory</em> and sends the order to the market using its trader</p>\u000a<p>Parameters:</p>\u000a<blockquote>\u000a<dl class="docutils">\u000a<dt><strong>Order factory</strong></dt>\u000a<dd>order factory function (default: order.Limit.T)</dd>\u000a<dt><strong>Action trigger</strong></dt>\u000a<dd>Event source making the strategy to wake up</dd>\u000a<dt><strong>Volume</strong></dt>\u000a<dd>defines volumes of orders to create\u000a(default: exponential distribution with \u03bb = 1)</dd>\u000a<dt><strong>Side</strong></dt>\u000a<dd>function choosing side of order to create (default: randomSide)</dd>\u000a</dl>\u000a</blockquote>\u000a</div>\u000a
p56
sS'A composite strategy initialized with an array of strategies.\nIn some moments of time the most effective strategy\nis chosen and made running; other strategies are suspended.\nThe choice is made randomly among the strategies that have\na positive efficiency trend, weighted by the efficiency value.\n\nParameters:\n\n    |weight|\n        weighting scheme for choosing strategies\n\n    |strategies|\n       original strategies that can be suspended\n\n    |efficiency|\n        function estimating is the strategy efficient or not\n\n    |estimator|\n       function creating phantom strategy used for efficiency estimation'
p57
V<div class="document">\u000a<p>A composite strategy initialized with an array of strategies.\u000aIn some moments of time the most effective strategy\u000ais chosen and made running; other strategies are suspended.\u000aThe choice is made randomly among the strategies that have\u000aa positive efficiency trend, weighted by the efficiency value.</p>\u000a<p>Parameters:</p>\u000a<blockquote>\u000a<dl class="docutils">\u000a<dt><strong>Weight function</strong></dt>\u000a<dd>weighting scheme for choosing strategies</dd>\u000a<dt><strong>strategies</strong></dt>\u000a<dd>original strategies that can be suspended</dd>\u000a<dt><strong>Efficiency evaluation function</strong></dt>\u000a<dd>function estimating is the strategy efficient or not</dd>\u000a<dt><strong>Function creating a strategy used to estimate the original one</strong></dt>\u000a<dd>function creating phantom strategy used for efficiency estimation</dd>\u000a</dl>\u000a</blockquote>\u000a</div>\u000a
p58
sS"Log normal distribution. If you take the natural logarithm of this distribution, you'll get a normal distribution with mean |mu| and standard deviation |sigma|. |mu| can have any value, and |sigma| must be greater than zero."
p59
V<div class="document">\u000a<p>Log normal distribution. If you take the natural logarithm of this distribution, you'll get a normal distribution with mean \u03bc and standard deviation \u03c3. \u03bc can have any value, and \u03c3 must be greater than zero.</p>\u000a</div>\u000a
p60
sS'A trader that trades a single asset on a single market.\n\nParameters:\n\n**orderBook**\n    order book for the asset being traded\n\n**strategies**\n    array of strategies run by the trader\n\n**amount**\n    current position of the trader (number of assets that it owns)\n\n**PnL**\n    current trader balance (number of money units that it owns)'
p61
V<div class="document">\u000a<p>A trader that trades a single asset on a single market.</p>\u000a<p>Parameters:</p>\u000a<dl class="docutils">\u000a<dt><strong>orderBook</strong></dt>\u000a<dd>order book for the asset being traded</dd>\u000a<dt><strong>strategies</strong></dt>\u000a<dd>array of strategies run by the trader</dd>\u000a<dt><strong>amount</strong></dt>\u000a<dd>current position of the trader (number of assets that it owns)</dd>\u000a<dt><strong>PnL</strong></dt>\u000a<dd>current trader balance (number of money units that it owns)</dd>\u000a</dl>\u000a</div>\u000a
p62
sS'Noise strategy is a quite dummy strategy that randomly creates an order\nand sends it to the order book.\n\nIt has following parameters:\n\n|orderFactoryT|\n    order factory function (default: order.Market.T)\n\n|creationIntervalDistr|\n    defines intervals of time between order creation\n    (default: exponential distribution with |lambda| = 1)\n\n|sideDistr|\n    side of orders to create\n    (default: discrete uniform distribution P(Sell)=P(Buy)=.5)'
p63
V<div class="document">\u000a<p>Noise strategy is a quite dummy strategy that randomly creates an order\u000aand sends it to the order book.</p>\u000a<p>It has following parameters:</p>\u000a<dl class="docutils">\u000a<dt><strong>Order factory</strong></dt>\u000a<dd>order factory function (default: order.Market.T)</dd>\u000a<dt><strong>Time intervals between two order creations</strong></dt>\u000a<dd>defines intervals of time between order creation\u000a(default: exponential distribution with \u03bb = 1)</dd>\u000a<dt><strong>Function to choose side of order to create</strong></dt>\u000a<dd>side of orders to create\u000a(default: discrete uniform distribution P(Sell)=P(Buy)=.5)</dd>\u000a</dl>\u000a</div>\u000a
p64
sS'Multicast event that is fired once a trade is done by *trader*'
p65
V<div class="document">\u000a<p>Multicast event that is fired once a trade is done by <em>trader</em></p>\u000a</div>\u000a
p66
sS'Adapts limit-like orders for usage where market-like orders are expected.\nUser should provide *priceFunc* calculating price of order to create'
p67
V<div class="document">\u000a<p>Adapts limit-like orders for usage where market-like orders are expected.\u000aUser should provide <em>priceFunc</em> calculating price of order to create</p>\u000a</div>\u000a
p68
sS'A composite strategy initialized with an array of strategies.\nIn some moments of time the most effective strategy\nis chosen and made running; other strategies are suspended.\n\nParameters:\n\n    |strategies|\n       original strategies that can be suspended\n\n    |efficiency|\n        function estimating is the strategy efficient or not\n\n    |estimator|\n       function creating phantom strategy used for efficiency estimation'
p69
V<div class="document">\u000a<p>A composite strategy initialized with an array of strategies.\u000aIn some moments of time the most effective strategy\u000ais chosen and made running; other strategies are suspended.</p>\u000a<p>Parameters:</p>\u000a<blockquote>\u000a<dl class="docutils">\u000a<dt><strong>strategies</strong></dt>\u000a<dd>original strategies that can be suspended</dd>\u000a<dt><strong>Efficiency evaluation function</strong></dt>\u000a<dd>function estimating is the strategy efficient or not</dd>\u000a<dt><strong>Function creating a strategy used to estimate the original one</strong></dt>\u000a<dd>function creating phantom strategy used for efficiency estimation</dd>\u000a</dl>\u000a</blockquote>\u000a</div>\u000a
p70
sS'Function returning Product of the operands'
p71
V<div class="document">\u000a<p>Function returning Product of the operands</p>\u000a</div>\u000a
p72
sS'AlwaysBest is a virtual order that ensures that it has the best price in the order book.\nIt is implemented as a limit order which is cancelled\nonce the best price in the order queue has changed\nand is sent again to the order book\nwith a price one tick better than the best price in the book.'
p73
V<div class="document">\u000a<p>AlwaysBest is a virtual order that ensures that it has the best price in the order book.\u000aIt is implemented as a limit order which is cancelled\u000aonce the best price in the order queue has changed\u000aand is sent again to the order book\u000awith a price one tick better than the best price in the book.</p>\u000a</div>\u000a
p74
sS'Order book for a single asset in a market.\nMaintains two order queues for orders of different sides'
p75
V<div class="document">\u000a<p>Order book for a single asset in a market.\u000aMaintains two order queues for orders of different sides</p>\u000a</div>\u000a
p76
sS'Return a random floating point number *N* such that *low* <= *N* <= *high* and with the specified *mode* between those bounds. The *low* and *high* bounds default to zero and one. The *mode* argument defaults to the midpoint between the bounds, giving a symmetric distribution.'
p77
V<div class="document">\u000a<p>Return a random floating point number <em>N</em> such that <em>low</em> &lt;= <em>N</em> &lt;= <em>high</em> and with the specified <em>mode</em> between those bounds. The <em>low</em> and <em>high</em> bounds default to zero and one. The <em>mode</em> argument defaults to the midpoint between the bounds, giving a symmetric distribution.</p>\u000a</div>\u000a
p78
sS'Weibull distribution. |alpha| is the scale parameter and |beta| is the shape parameter.'
p79
V<div class="document">\u000a<p>Weibull distribution. \u03b1 is the scale parameter and \u03b2 is the shape parameter.</p>\u000a</div>\u000a
p80
sS'Limit order of the given *side*, *price* and *volume*'
p81
V<div class="document">\u000a<p>Limit order of the given <em>side</em>, <em>price</em> and <em>volume</em></p>\u000a</div>\u000a
p82
sS"Observes trader's balance as if was cleared (trader's balance if its position was cleared).\nCan be None if there is not enough assets on the market to clear the position.\nThis observable is updated when trader position is changed\n(which is not fair since the asset price change influences on this parameter also)"
p83
V<div class="document">\u000a<p>Observes trader's balance as if was cleared (trader's balance if its position was cleared).\u000aCan be None if there is not enough assets on the market to clear the position.\u000aThis observable is updated when trader position is changed\u000a(which is not fair since the asset price change influences on this parameter also)</p>\u000a</div>\u000a
p84
sS'|mu| is the mean angle, expressed in radians between 0 and 2|pi|, and |kappa| is the concentration parameter, which must be greater than or equal to zero. If |kappa| is equal to zero, this distribution reduces to a uniform random angle over the range 0 to 2|pi|'
p85
V<div class="document">\u000a<p>\u03bc is the mean angle, expressed in radians between 0 and 2|pi|, and \u03ba is the concentration parameter, which must be greater than or equal to zero. If \u03ba is equal to zero, this distribution reduces to a uniform random angle over the range 0 to 2|pi|</p>\u000a</div>\u000a
p86
sS'Trend follower can be considered as a sort of a signal strategy\nwhere the *signal* is a trend of the asset.\nUnder trend we understand the first derivative of some moving average of asset prices.\nIf the derivative is positive, the trader buys; if negative - it sells.\nSince moving average is a continuously changing signal, we check its\nderivative at random moments of time given by *creationIntervalDistr*.\n\nIt has following parameters:\n\n|ewma_alpha|\n    parameter |alpha| for exponentially weighted moving average\n   (default: 0.15.)\n\n|orderFactory|\n    order factory function (default: order.Market.T)\n\n|threshold|\n    threshold when the trader starts to act (default: 0.)\n\n|creationIntervalDistr|\n    defines intervals of time between order creation\n    (default: exponential distribution with |lambda| = 1)\n\n|volumeDistr|\n    defines volumes of orders to create\n    (default: exponential distribution with |lambda| = 1)'
p87
V<div class="document">\u000a<p>Trend follower can be considered as a sort of a signal strategy\u000awhere the <em>signal</em> is a trend of the asset.\u000aUnder trend we understand the first derivative of some moving average of asset prices.\u000aIf the derivative is positive, the trader buys; if negative - it sells.\u000aSince moving average is a continuously changing signal, we check its\u000aderivative at random moments of time given by <em>creationIntervalDistr</em>.</p>\u000a<p>It has following parameters:</p>\u000a<dl class="docutils">\u000a<dt><a href="#id1"><span class="problematic" id="id2">|ewma_alpha|</span></a></dt>\u000a<dd><blockquote class="first">\u000aparameter \u03b1 for exponentially weighted moving average</blockquote>\u000a<div class="system-message">\u000a<p class="system-message-title">System Message: WARNING/2 (<tt class="docutils">&lt;string&gt;</tt>, line 117)</p>\u000aBlock quote ends without a blank line; unexpected unindent.</div>\u000a<p class="last">(default: 0.15.)</p>\u000a</dd>\u000a<dt><strong>Order factory</strong></dt>\u000a<dd>order factory function (default: order.Market.T)</dd>\u000a<dt><strong>Threshold</strong></dt>\u000a<dd>threshold when the trader starts to act (default: 0.)</dd>\u000a<dt><strong>Time intervals between two order creations</strong></dt>\u000a<dd>defines intervals of time between order creation\u000a(default: exponential distribution with \u03bb = 1)</dd>\u000a<dt><strong>Volume of orders to create</strong></dt>\u000a<dd>defines volumes of orders to create\u000a(default: exponential distribution with \u03bb = 1)</dd>\u000a</dl>\u000a<div class="system-messages section">\u000a<h1>Docutils System Messages</h1>\u000a<div class="system-message" id="id1">\u000a<p class="system-message-title">System Message: ERROR/3 (<tt class="docutils">&lt;string&gt;</tt>, line 117); <em><a href="#id2">backlink</a></em></p>\u000aUndefined substitution referenced: &quot;ewma_alpha&quot;.</div>\u000a</div>\u000a</div>\u000a
p88
sS'Dependent price strategy believes that the fair price of an asset *A*\nis completely correlated with price of another asset *B* and the following relation\nshould be held: *PriceA* = *kPriceB*, where *k* is some factor.\nIt may be considered as a variety of a fundamental value strategy\nwith the exception that it is invoked every the time price of another\nasset *B* changes.\n\nIt has following parameters:\n\n|orderFactory|\n    order factory function (default: order.Market.T)\n\n|bookToDependOn|\n    reference to order book for another asset used to evaluate fair price of our asset\n\n|factor|\n    multiplier to obtain fair asset price from the reference asset price\n\n|volumeDistr|\n    defines volumes of orders to create\n    (default: exponential distribution with |lambda| = 1)'
p89
V<div class="document">\u000a<p>Dependent price strategy believes that the fair price of an asset <em>A</em>\u000ais completely correlated with price of another asset <em>B</em> and the following relation\u000ashould be held: <em>PriceA</em> = <em>kPriceB</em>, where <em>k</em> is some factor.\u000aIt may be considered as a variety of a fundamental value strategy\u000awith the exception that it is invoked every the time price of another\u000aasset <em>B</em> changes.</p>\u000a<p>It has following parameters:</p>\u000a<dl class="docutils">\u000a<dt><strong>Order factory</strong></dt>\u000a<dd>order factory function (default: order.Market.T)</dd>\u000a<dt><strong>Asset to depend on</strong></dt>\u000a<dd>reference to order book for another asset used to evaluate fair price of our asset</dd>\u000a<dt><strong>Factor</strong></dt>\u000a<dd>multiplier to obtain fair asset price from the reference asset price</dd>\u000a<dt><strong>Volume of orders to create</strong></dt>\u000a<dd>defines volumes of orders to create\u000a(default: exponential distribution with \u03bb = 1)</dd>\u000a</dl>\u000a</div>\u000a
p90
sS'Observable that stores some scalar value and knows how to update it\n\n* **Source of data** -- function that provides data\n* **Events when to act** -- events when to act'
p91
V<div class="document">\u000a<p>Observable that stores some scalar value and knows how to update it</p>\u000a<ul class="simple">\u000a<li><strong>Source of data</strong> -- function that provides data</li>\u000a<li><strong>Events when to act</strong> -- events when to act</li>\u000a</ul>\u000a</div>\u000a
p92
sS'Represents a repeating action.\n\nParameters:\n\n*intervalFunc*\n    intervals of time between moments when subscribed listeners are to be called'
p93
V<div class="document">\u000a<p>Represents a repeating action.</p>\u000a<p>Parameters:</p>\u000a<dl class="docutils">\u000a<dt><em>intervalFunc</em></dt>\u000a<dd>intervals of time between moments when subscribed listeners are to be called</dd>\u000a</dl>\u000a</div>\u000a
p94
sS'Normal distribution. |mu| is the mean, and |sigma| is the standard deviation.'
p95
V<div class="document">\u000a<p>Normal distribution. \u03bc is the mean, and \u03c3 is the standard deviation.</p>\u000a</div>\u000a
p96
sS'Return a random floating point number *N* such that *a* <= *N* <= *b* for *a* <= *b* and *b* <= *N* <= *a* for *b* < *a*.\nThe end-point value *b* may or may not be included in the range depending on floating-point rounding in the equation *a* + (*b*-*a*) * *random()*.'
p97
V<div class="document">\u000a<p>Return a random floating point number <em>N</em> such that <em>a</em> &lt;= <em>N</em> &lt;= <em>b</em> for <em>a</em> &lt;= <em>b</em> and <em>b</em> &lt;= <em>N</em> &lt;= <em>a</em> for <em>b</em> &lt; <em>a</em>.\u000aThe end-point value <em>b</em> may or may not be included in the range depending on floating-point rounding in the equation <em>a</em> + (<em>b</em>-<em>a</em>) * <em>random()</em>.</p>\u000a</div>\u000a
p98
sS'Function returning product of the operands'
p99
V<div class="document">\u000a<p>Function returning product of the operands</p>\u000a</div>\u000a
p100
sS'Strategy that estimates efficiency of original *strategy*\n(normally as derivative of "cleared" balance for its clone sending unit volume orders)\n\nParameters:\n\n    |strategy|\n        original strategy that can be suspended\n\n    |efficiency|\n        function estimating is the strategy efficient or not\n\n    |estimator|\n        function creating phantom strategy used for efficiency estimation'
p101
V<div class="document">\u000a<p>Strategy that estimates efficiency of original <em>strategy</em>\u000a(normally as derivative of &quot;cleared&quot; balance for its clone sending unit volume orders)</p>\u000a<p>Parameters:</p>\u000a<blockquote>\u000a<dl class="docutils">\u000a<dt><strong>strategy</strong></dt>\u000a<dd>original strategy that can be suspended</dd>\u000a<dt><strong>Efficiency evaluation function</strong></dt>\u000a<dd>function estimating is the strategy efficient or not</dd>\u000a<dt><strong>Function creating a strategy used to estimate the original one</strong></dt>\u000a<dd>function creating phantom strategy used for efficiency estimation</dd>\u000a</dl>\u000a</blockquote>\u000a</div>\u000a
p102
sS'Aggregates (folds) time-dependent data from *source* using given functional  *folder* (e.g. moving average)\n\nFor example ::\n\n    price_avg = Fold(MidPrice(book_A), ewma(alpha = 0.15))\n\ncreates a observable for a moving average with |alpha| = 0.15 of mid-price of asset *book_A*'
p103
V<div class="document">\u000a<p>Aggregates (folds) time-dependent data from <em>source</em> using given functional  <em>folder</em> (e.g. moving average)</p>\u000a<p>For example</p>\u000a<pre class="literal-block">\u000aprice_avg = Fold(MidPrice(book_A), ewma(alpha = 0.15))\u000a</pre>\u000a<p>creates a observable for a moving average with \u03b1 = 0.15 of mid-price of asset <em>book_A</em></p>\u000a</div>\u000a
p104
sS'Liquidity provider for one side has followng parameters:\n\n|side|\n    side of orders to create (default: Side.Sell)\n\n|orderFactory|\n    order factory function (default: order.Limit.T)\n\n|initialValue|\n    initial price which is taken if orderBook is empty (default: 100)\n\n|creationIntervalDistr|\n    defines intervals of time between order creation\n    (default: exponential distribution with |lambda| = 1)\n\n|priceDistr|\n    defines multipliers for current asset price when price of\n    order to create is calculated (default: log normal distribution with\n    |mu| = 0 and |sigma| = 0.1)\n\n|volumeDistr|\n    defines volumes of orders to create\n    (default: exponential distribution with |lambda| = 1)\n\nIt wakes up in moments of time given by *creationIntervalDistr*, checks\nthe last best price of orders in the corresponding queue, takes *initialValue*\nif it is empty, multiplies it by a value taken from *priceDistr* to obtain price\nof the order to create, calculates order volume using *volumeDistr*, creates\nan order via *orderFactoryT(side)* and tells the trader to send it.'
p105
V<div class="document">\u000a<p>Liquidity provider for one side has followng parameters:</p>\u000a<dl class="docutils">\u000a<dt><strong>Side</strong></dt>\u000a<dd>side of orders to create (default: Side.Sell)</dd>\u000a<dt><strong>Order factory</strong></dt>\u000a<dd>order factory function (default: order.Limit.T)</dd>\u000a<dt><strong>Initial value</strong></dt>\u000a<dd>initial price which is taken if orderBook is empty (default: 100)</dd>\u000a<dt><strong>Time intervals between two order creations</strong></dt>\u000a<dd>defines intervals of time between order creation\u000a(default: exponential distribution with \u03bb = 1)</dd>\u000a<dt><strong>Price of orders to create as multiplier to the current price</strong></dt>\u000a<dd>defines multipliers for current asset price when price of\u000aorder to create is calculated (default: log normal distribution with\u000a\u03bc = 0 and \u03c3 = 0.1)</dd>\u000a<dt><strong>Volume of orders to create</strong></dt>\u000a<dd>defines volumes of orders to create\u000a(default: exponential distribution with \u03bb = 1)</dd>\u000a</dl>\u000a<p>It wakes up in moments of time given by <em>creationIntervalDistr</em>, checks\u000athe last best price of orders in the corresponding queue, takes <em>initialValue</em>\u000aif it is empty, multiplies it by a value taken from <em>priceDistr</em> to obtain price\u000aof the order to create, calculates order volume using <em>volumeDistr</em>, creates\u000aan order via <em>orderFactoryT(side)</em> and tells the trader to send it.</p>\u000a</div>\u000a
p106
sS'Generic 2D graph to be rendered by means of javascript libraries'
p107
V<div class="document">\u000a<p>Generic 2D graph to be rendered by means of javascript libraries</p>\u000a</div>\u000a
p108
sS'Fundamental value strategy believes that an asset should have some specific price\n(*fundamental value*) and if the current asset price is lower than the fundamental value\nit starts to buy the asset and if the price is higher it starts to sell the asset.\n\nIt has following parameters:\n\n|orderFactory|\n    order factory function (default: order.Market.T)\n\n|creationIntervalDistr|\n    defines intervals of time between order creation\n    (default: exponential distribution with |lambda| = 1)\n\n|fundamentalValue|\n    defines fundamental value (default: constant 100)\n\n|volumeDistr|\n    defines volumes of orders to create\n    (default: exponential distribution with |lambda| = 1)'
p109
V<div class="document">\u000a<p>Fundamental value strategy believes that an asset should have some specific price\u000a(<em>fundamental value</em>) and if the current asset price is lower than the fundamental value\u000ait starts to buy the asset and if the price is higher it starts to sell the asset.</p>\u000a<p>It has following parameters:</p>\u000a<dl class="docutils">\u000a<dt><strong>Order factory</strong></dt>\u000a<dd>order factory function (default: order.Market.T)</dd>\u000a<dt><strong>Time intervals between two order creations</strong></dt>\u000a<dd>defines intervals of time between order creation\u000a(default: exponential distribution with \u03bb = 1)</dd>\u000a<dt><strong>Fundamental value</strong></dt>\u000a<dd>defines fundamental value (default: constant 100)</dd>\u000a<dt><strong>Volume of orders to create</strong></dt>\u000a<dd>defines volumes of orders to create\u000a(default: exponential distribution with \u03bb = 1)</dd>\u000a</dl>\u000a</div>\u000a
p110
sS"Used to evaluates price at which a market order of given volume would be executed\nSince this query might be computationally expensive and done asynchronously,\nwe wrap function OrderQueue.evaluateOrderPrice by this class.\nThe result will returned in on_matched event with empty 'other' field\nTBD: we make use of on_matched machinery since that is supported in RemoteBook\nbut i'm not sure that it is a good design decision."
p111
V<div class="document">\u000a<p>Used to evaluates price at which a market order of given volume would be executed\u000aSince this query might be computationally expensive and done asynchronously,\u000awe wrap function OrderQueue.evaluateOrderPrice by this class.\u000aThe result will returned in on_matched event with empty 'other' field\u000aTBD: we make use of on_matched machinery since that is supported in RemoteBook\u000abut i'm not sure that it is a good design decision.</p>\u000a</div>\u000a
p112
sS'Function returning square root of the operand'
p113
V<div class="document">\u000a<p>Function returning square root of the operand</p>\u000a</div>\u000a
p114
sS'Liquidity provider is a combination of two LiquidityProviderSide traders\nwith the same parameters but different trading sides.\n\nIt has followng parameters:\n\n|orderFactory|\n    order factory function (default: order.Limit.T)\n\n|initialValue|\n    initial price which is taken if orderBook is empty (default: 100)\n\n|creationIntervalDistr|\n    defines intervals of time between order creation\n    (default: exponential distribution with |lambda| = 1)\n\n|priceDistr|\n    defines multipliers for current asset price when price of\n    order to create is calculated (default: log normal distribution with\n    |mu| = 0 and |sigma| = 0.1)\n\n|volumeDistr|\n    defines volumes of orders to create\n    (default: exponential distribution with |lambda| = 1)'
p115
V<div class="document">\u000a<p>Liquidity provider is a combination of two LiquidityProviderSide traders\u000awith the same parameters but different trading sides.</p>\u000a<p>It has followng parameters:</p>\u000a<dl class="docutils">\u000a<dt><strong>Order factory</strong></dt>\u000a<dd>order factory function (default: order.Limit.T)</dd>\u000a<dt><strong>Initial value</strong></dt>\u000a<dd>initial price which is taken if orderBook is empty (default: 100)</dd>\u000a<dt><strong>Time intervals between two order creations</strong></dt>\u000a<dd>defines intervals of time between order creation\u000a(default: exponential distribution with \u03bb = 1)</dd>\u000a<dt><strong>Price of orders to create as multiplier to the current price</strong></dt>\u000a<dd>defines multipliers for current asset price when price of\u000aorder to create is calculated (default: log normal distribution with\u000a\u03bc = 0 and \u03c3 = 0.1)</dd>\u000a<dt><strong>Volume of orders to create</strong></dt>\u000a<dd>defines volumes of orders to create\u000a(default: exponential distribution with \u03bb = 1)</dd>\u000a</dl>\u000a</div>\u000a
p116
sS'Function substructing the right operand from the left one'
p117
V<div class="document">\u000a<p>Function substructing the right operand from the left one</p>\u000a</div>\u000a
p118
sS'Relative strength index'
p119
V<div class="document">\u000a<p>Relative strength index</p>\u000a</div>\u000a
p120
s.